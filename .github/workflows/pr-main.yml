name: PR Validation

on:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false

      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            command: cargo

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            command: cross

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            command: cargo

        rust:
          - stable
          - nightly
          - beta

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Cargo and cross
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
          key: ${{ matrix.platform.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.platform.target }}-cargo

      - name: Install cross
        if: matrix.platform.command == 'cross'
        run: |
          if ! command -v cross &>/dev/null; then
            cargo install cross
          fi

      - name: Build
        id: build
        run: |
          ${{ matrix.platform.command }} build --target ${{ matrix.platform.target }}
          echo "EXIT_CODE=$?" >> "$GITHUB_OUTPUT"
          echo "EXIT_CODE=$?"
        continue-on-error: ${{ matrix.rust != 'stable' }}

      - name: Test
        id: test
        run: |
          ${{ matrix.platform.command }} test --target ${{ matrix.platform.target }}
          echo "EXIT_CODE=$?" >> "$GITHUB_OUTPUT"
          echo "EXIT_CODE=$?"
        continue-on-error: ${{ matrix.rust != 'stable' }}

      - name: Issue warnings for ${{ matrix.rust }} build fails
        env:
          BUILD_RESULT: ${{ steps.build.outputs.EXIT_CODE }}
        uses: actions/github-script@v7
        with:
          script: |
            const { BUILD_RESULT } = process.env
            if (BUILD_RESULT == 0) {
              return;
            }
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `üö® üõ†Ô∏è Build Failures on **${{ matrix.rust }}** Rust with **${{ matrix.platform.target }}** target.`
            })

      - name: Issue warnings for ${{ matrix.rust }} test fails
        env:
          TEST_RESULT: ${{ steps.test.outputs.EXIT_CODE }}
        uses: actions/github-script@v7
        with:
          script: |
            const { TEST_RESULT } = process.env
            if (TEST_RESULT == 0) {
              return;
            }
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `üö® ‚ùå Failures on **${{ matrix.rust }}** Rust with **${{ matrix.platform.target }}** target.`
            })

  format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install nightly
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Format
        run: cargo +nightly fmt --check

  clippy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clippy lint
        run: cargo clippy -- -D warnings
